AWSTemplateFormatVersion: 2010-09-09

Description: >-
  Create two EC2s  with multiple input parameters in two different subnets.

Parameters:

  UserName:
    Description: Name of the primary user
    Type: String
    Default: e91user

  SSHPublicKey:
    Type: String
    Default: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDUVSNoF5znj0iV5zQrREktntXjyDEaKqlplRyoyM4rwURqoK72XcyUu1ybnRaFHTvcmIYINNd2gUFIRpMuZwx5ovregVZVwff93U7cvWc8G+0JChYKAE4vXMxt7H2sZGC2ljy9L/Gm7GZYeySJgPo7nmKAsqMZMdUb/UpqTgYz6dx5Imt8qkT/defCgtHmA8gS+6LdC3yUEWPu6TcgMoaMYFTR1jlYoxwsRkCZJHoczAm/OgvyByGm2GpkbwIRR7f0iIdUBZeMQ/wMo2yVDllODpxldt/2C+n2WPwVEymB2zGbVdH7ZkP0SRV515wXzgNKYZP/1guh9wivYpeDJIYJ

  SecurityGroup:
    Description: Name of security group
    # Check parameters type : go to https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html
    Type: String
    Default: sg-09c6b41f510a12fc8

  Subnet1:
    Description: Subnet to host the first EC2
    # Check parameters type : go to https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html
    Type: 'AWS::EC2::Subnet::Id'
    ConstraintDescription: subnet where this machine reside

  Subnet2:
    Description: Subnet to host the second EC2
    # Check parameters type : go to https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html
    Type: 'AWS::EC2::Subnet::Id'
    ConstraintDescription: subnet where this machine reside

  vpcid:
    Description: VPC of the launcher and its security group
    # Check parameters type : go to https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html
    Type: 'AWS::EC2::VPC::Id'
    ConstraintDescription: must be a VPC  where the SG and the launcher reside

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
    ConstraintDescription: must be a valid EC2 instance type.

  AMI:
    Description: AMI specified by instructors
    Type: 'AWS::EC2::Image::Id'
    ConstraintDescription: must be an AMI set for Problem Set

Resources:

  EC2Instance1:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AMI
      InstanceType: !Ref InstanceType
      SubnetId: !Ref Subnet1
      SecurityGroupIds: !Ref SecurityGroup    #<- Need to be input parameter ???
      Tags:
        -
          Key: Name
          Value: 'Ansible Client'
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash -xe
              adduser ${USERNAME}
              echo ${USERNAME} 'ALL=(ALL) NOPASSWD:ALL'>>/etc/sudoers.d/${USERNAME}
              mkdir /home/${USERNAME}/.ssh
              echo ${SSHKEY} > /home/${USERNAME}/.ssh/authorized_keys
              chown -R ${USERNAME}.${USERNAME} /home/${USERNAME}/.ssh
              chmod 700 /home/${USERNAME}/.ssh
              chmod 600 /home/${USERNAME}/.ssh/authorized_keys
              hostnamectl set-hostname  ansible-client.carbos.io --pretty
              hostnamectl set-hostname  ansible-client.carbos.io --static
            - USERNAME: !Ref UserName
              SSHKEY: !Ref SSHPublicKey


  EC2Instance2:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AMI
      InstanceType: !Ref InstanceType
      SubnetId: !Ref Subnet2
      SecurityGroupIds: !Ref SecurityGroup    #<- Need to be input parameter ???
      Tags:
        -
          Key: Name
          Value: 'Ansible Server'
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash -xe
              adduser ${USERNAME}
              echo ${USERNAME} 'ALL=(ALL) NOPASSWD:ALL'>>/etc/sudoers.d/${USERNAME}
              mkdir /home/${USERNAME}/.ssh
              echo ${SSHKEY} > /home/${USERNAME}/.ssh/authorized_keys
              chown -R ${USERNAME}.${USERNAME} /home/${USERNAME}/.ssh
              chmod 700 /home/${USERNAME}/.ssh
              chmod 600 /home/${USERNAME}/.ssh/authorized_keys
              hostnamectl set-hostname  ansible-server.carbos.io --pretty
              hostnamectl set-hostname  ansible-server.carbos.io --static
            - USERNAME: !Ref UserName
              SSHKEY: !Ref SSHPublicKey


Outputs:
  PublicIp:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt EC2Instance1.PublicIp
    Export:
      Name: !Sub "${AWS::StackName}-PublicIp"
